[{"filePath":"C:\\Users\\fupifigu\\Videos\\test_unesum\\unesum-app-final\\scopus-backend\\controllers\\authController.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":14,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[568,616],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1518,1567],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst User = require('../models/User');\r\n\r\n// Controlador para el registro de usuarios\r\nconst createUser = async (req, res) => {\r\n    const { username, password, role } = req.body;\r\n    try {\r\n        // Encriptar la contraseña\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n        const newUser = await User.create({ username, password: hashedPassword, role });\r\n        res.json({ message: 'Usuario creado exitosamente', user: newUser });\r\n    } catch (error) {\r\n        console.error('Error al crear usuario:', error);\r\n        res.status(500).json({ error: 'Error al crear el usuario' });\r\n    }\r\n};\r\n\r\n// Controlador para el inicio de sesión\r\nconst login = async (req, res) => {\r\n    const { username, password } = req.body;\r\n    try {\r\n        // Buscar al usuario en la base de datos\r\n        const user = await User.findOne({ where: { username } });\r\n        if (!user) return res.status(401).json({ success: false, message: 'Credenciales incorrectas' });\r\n\r\n        // Comparar la contraseña\r\n        const isMatch = await bcrypt.compare(password, user.password);\r\n        if (!isMatch) return res.status(401).json({ success: false, message: 'Credenciales incorrectas' });\r\n\r\n        // Generar el token JWT\r\n        const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n        res.json({ success: true, token, role: user.role });\r\n    } catch (error) {\r\n        console.error('Error al iniciar sesión:', error);\r\n        res.status(500).json({ error: 'Error al iniciar sesión' });\r\n    }\r\n};\r\n\r\nmodule.exports = { createUser, login };\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]}]},{"filePath":"C:\\Users\\fupifigu\\Videos\\test_unesum\\unesum-app-final\\scopus-backend\\controllers\\bookController.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":18,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":18,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[604,673],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1269,1338],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// scopus-backend/controllers/bookController.js\r\nconst axios = require('axios');\r\n\r\n// Controlador para buscar en Google Books API\r\nexports.searchGoogleBooks = async (req, res) => {\r\n    const { isbn } = req.query;\r\n    try {\r\n        const response = await axios.get(`https://www.googleapis.com/books/v1/volumes`, {\r\n            params: {\r\n                q: `isbn:${isbn}`,\r\n                key: process.env.GOOGLE_BOOKS_API_KEY\r\n            }\r\n        });\r\n\r\n        const book = response.data.items ? response.data.items[0].volumeInfo : null;\r\n        res.json(book);\r\n    } catch (error) {\r\n        console.error('Error al consultar Google Books API:', error.message);\r\n        res.status(500).json({ error: 'Error al consultar Google Books API' });\r\n    }\r\n};\r\n\r\n// Controlador para buscar en Open Library API\r\nexports.searchOpenLibrary = async (req, res) => {\r\n    const { isbn } = req.query;\r\n    try {\r\n        const response = await axios.get(`https://openlibrary.org/api/books`, {\r\n            params: {\r\n                bibkeys: `ISBN:${isbn}`,\r\n                format: 'json',\r\n                jscmd: 'data'\r\n            }\r\n        });\r\n\r\n        const book = response.data[`ISBN:${isbn}`] || null;\r\n        res.json(book);\r\n    } catch (error) {\r\n        console.error('Error al consultar Open Library API:', error.message);\r\n        res.status(500).json({ error: 'Error al consultar Open Library API' });\r\n    }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]}]},{"filePath":"C:\\Users\\fupifigu\\Videos\\test_unesum\\unesum-app-final\\scopus-backend\\controllers\\coreController.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[825,879],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// backend/controllers/coreController.js\r\nconst axios = require('axios');\r\n\r\nexports.searchCORE = async (req, res) => {\r\n  const { searchType, query } = req.query;\r\n  let searchQuery;\r\n\r\n  switch (searchType) {\r\n    case 'autor':\r\n      searchQuery = `author=${query}`;\r\n      break;\r\n    case 'doi':\r\n      searchQuery = `doi=${query}`;\r\n      break;\r\n    case 'nombre':\r\n      searchQuery = `title=${query}`;\r\n      break;\r\n    default:\r\n      return res.status(400).json({ error: 'Tipo de búsqueda no válido' });\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get('https://core.ac.uk:443/api-v2/articles/search', {\r\n      params: { [searchType]: query },\r\n      headers: { 'Authorization': `Bearer TU_API_KEY` }, // Reemplaza con tu API Key de CORE\r\n    });\r\n    res.json(response.data.data);\r\n  } catch (error) {\r\n    console.error(\"Error en la búsqueda en CORE:\", error);\r\n    res.status(500).json({ error: \"Error en la búsqueda en CORE\" });\r\n  }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]}]},{"filePath":"C:\\Users\\fupifigu\\Videos\\test_unesum\\unesum-app-final\\scopus-backend\\controllers\\crossRefController.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[791,849],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// backend/controllers/crossRefController.js\r\nconst axios = require('axios');\r\n\r\nexports.searchCrossRef = async (req, res) => {\r\n  const { searchType, query } = req.query;\r\n  let searchQuery;\r\n\r\n  switch (searchType) {\r\n    case 'autor':\r\n      searchQuery = `query.author=${query}`;\r\n      break;\r\n    case 'doi':\r\n      searchQuery = `query=${query}`;\r\n      break;\r\n    case 'nombre':\r\n      searchQuery = `query.title=${query}`;\r\n      break;\r\n    default:\r\n      return res.status(400).json({ error: 'Tipo de búsqueda no válido' });\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get('https://api.crossref.org/works', {\r\n      params: { [searchType === 'doi' ? 'query' : 'query.bibliographic']: query },\r\n    });\r\n    res.json(response.data.message.items);\r\n  } catch (error) {\r\n    console.error(\"Error en la búsqueda en CrossRef:\", error);\r\n    res.status(500).json({ error: \"Error en la búsqueda en CrossRef\" });\r\n  }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]}]},{"filePath":"C:\\Users\\fupifigu\\Videos\\test_unesum\\unesum-app-final\\scopus-backend\\controllers\\openAireController.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[756,814],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// backend/controllers/openAireController.js\r\nconst axios = require('axios');\r\n\r\nexports.searchOpenAIRE = async (req, res) => {\r\n  const { searchType, query } = req.query;\r\n  let searchParam;\r\n\r\n  switch (searchType) {\r\n    case 'autor':\r\n      searchParam = `author=${query}`;\r\n      break;\r\n    case 'doi':\r\n      searchParam = `doi=${query}`;\r\n      break;\r\n    case 'nombre':\r\n      searchParam = `title=${query}`;\r\n      break;\r\n    default:\r\n      return res.status(400).json({ error: 'Tipo de búsqueda no válido' });\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get('https://api.openaire.eu/search/publications', {\r\n      params: { [searchType]: query },\r\n    });\r\n    res.json(response.data.response.results.result);\r\n  } catch (error) {\r\n    console.error(\"Error en la búsqueda en OpenAIRE:\", error);\r\n    res.status(500).json({ error: \"Error en la búsqueda en OpenAIRE\" });\r\n  }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]}]},{"filePath":"C:\\Users\\fupifigu\\Videos\\test_unesum\\unesum-app-final\\scopus-backend\\controllers\\researchProjectController.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1242,1294],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// controllers/researchProjectController.js\r\nconst ResearchProject = require('../models/ResearchProject');\r\nconst ProjectImage = require('../models/ProjectImage');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nexports.createProject = async (req, res) => {\r\n    const { name, description, type, score } = req.body;\r\n    const files = req.files; // Suponiendo que las imágenes se suben en files\r\n\r\n    try {\r\n        // Crear el proyecto en la base de datos\r\n        const project = await ResearchProject.create({ name, description, type, score });\r\n\r\n        // Guardar cada imagen en la base de datos con la ruta relativa\r\n        const imagePaths = [];\r\n        for (const file of files) {\r\n            // Mover el archivo a la carpeta 'uploads' (ya realizado por multer)\r\n            const imagePath = `uploads/${file.filename}`;\r\n\r\n            // Crear el registro de imagen en la base de datos\r\n            const image = await ProjectImage.create({\r\n                path: imagePath, // Ruta relativa de la imagen\r\n                projectId: project.id,\r\n            });\r\n\r\n            imagePaths.push(image.path);\r\n        }\r\n\r\n        res.status(201).json({ project, images: imagePaths });\r\n    } catch (error) {\r\n        console.error('Error al crear el proyecto:', error);\r\n        res.status(500).json({ error: 'Error al crear el proyecto.' });\r\n    }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]}]},{"filePath":"C:\\Users\\fupifigu\\Videos\\test_unesum\\unesum-app-final\\scopus-backend\\controllers\\scieloController.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1255,1311],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const axios = require('axios');\r\n\r\nexports.searchScielo = async (req, res) => {\r\n  const { searchType, query } = req.query;\r\n  let url = '';\r\n  let params = {\r\n    fmt: 'json', // Formato de salida\r\n    api: 'v2', // Versión de la API, si es necesario\r\n    collection: 'scl', // Colección, ajustar según el caso\r\n    begin_date: '2021-01', // Ejemplo de fecha de inicio\r\n    end_date: '2021-12', // Ejemplo de fecha de fin\r\n  };\r\n\r\n  // Construir URL y parámetros según el tipo de búsqueda\r\n  switch (searchType) {\r\n    case 'autor':\r\n      url = 'https://usage.apis.scielo.org/reports/ir_a1';\r\n      params.author = query; // SciELO requiere este parámetro para autor\r\n      break;\r\n    case 'doi':\r\n      url = 'https://usage.apis.scielo.org/reports/ir_a1';\r\n      params.pid = query; // SciELO permite buscar por PID para artículos\r\n      break;\r\n    case 'nombre':\r\n      url = 'https://usage.apis.scielo.org/reports/ir_a1';\r\n      params.title = query; // Suponiendo que la API permite 'title' (verificar en la doc.)\r\n      break;\r\n    default:\r\n      return res.status(400).json({ error: 'Tipo de búsqueda no válido' });\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get(url, { params });\r\n    res.json(response.data);\r\n  } catch (error) {\r\n    console.error(\"Error en la búsqueda en SciELO:\", error);\r\n    res.status(500).json({ error: \"Error en la búsqueda en SciELO\" });\r\n  }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]}]},{"filePath":"C:\\Users\\fupifigu\\Videos\\test_unesum\\unesum-app-final\\scopus-backend\\controllers\\scopusController.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[515,549],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":18,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":18,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[559,598],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[712,779],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1049,1090],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1634,1684],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1717,1771],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// controllers/scopusController.js\r\n\r\nconst axios = require('axios');\r\nconst fs = require('fs');\r\nconst { extractDoiOrTitle } = require('../utils/pdfUtils');\r\n\r\nexports.checkScopus = async (req, res) => {\r\n    try {\r\n        // Cargar archivo PDF\r\n        const pdfFile = req.file;\r\n        const fileData = fs.readFileSync(pdfFile.path);\r\n\r\n        // Extraer DOI o título del archivo\r\n        const { doi, title } = await extractDoiOrTitle(fileData);\r\n\r\n        // Debug: imprimir DOI y título extraídos\r\n        console.log('DOI extraído:', doi);\r\n        console.log('Título extraído:', title);\r\n\r\n        // Validar si hay información suficiente para la consulta\r\n        if (!doi && !title) {\r\n            console.error('No se pudo encontrar DOI ni título en el archivo.');\r\n            return res.status(400).json({ error: 'El archivo no contiene un DOI ni un título reconocible para la búsqueda en Scopus.' });\r\n        }\r\n\r\n        const query = doi ? `DOI(${doi})` : `TITLE(\"${title}\")`;\r\n\r\n        // Debug: imprimir la consulta\r\n        console.log('Consulta a Scopus:', query);\r\n\r\n        // Solicitar datos a la API de Scopus\r\n        const response = await axios.get('https://api.elsevier.com/content/search/scopus', {\r\n            params: { query },\r\n            headers: { 'X-ELS-APIKey': process.env.SCOPUS_API_KEY }\r\n        });\r\n\r\n        // Procesar y enviar respuesta\r\n        const results = response.data['search-results'].entry;\r\n        res.json({\r\n            exists: results && results.length > 0,\r\n            fileName: pdfFile.originalname,\r\n            data: results[0] || null,\r\n        });\r\n\r\n        console.log('Verificación en Scopus completada.');\r\n    } catch (error) {\r\n        console.error('Error en checkScopus:', error.message);\r\n        res.status(500).json({ error: 'Error al verificar en Scopus.' });\r\n    }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]}]}]